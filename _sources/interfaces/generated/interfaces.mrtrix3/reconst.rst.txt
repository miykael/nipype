.. AUTO-GENERATED FILE -- DO NOT EDIT!

interfaces.mrtrix3.reconst
==========================


.. _nipype.interfaces.mrtrix3.reconst.EstimateFOD:


.. index:: EstimateFOD

EstimateFOD
-----------

`Link to code <http://github.com/nipy/nipype/tree/93c475b/nipype/interfaces/mrtrix3/reconst.py#L137>`__

Wraps command **dwi2fod**

Estimate fibre orientation distributions from diffusion data using spherical deconvolution

Example
~~~~~~~

>>> import nipype.interfaces.mrtrix3 as mrt
>>> fod = mrt.EstimateFOD()
>>> fod.inputs.algorithm = 'csd'
>>> fod.inputs.in_file = 'dwi.mif'
>>> fod.inputs.wm_txt = 'wm.txt'
>>> fod.inputs.grad_fsl = ('bvecs', 'bvals')
>>> fod.cmdline                               # doctest: +ELLIPSIS
'dwi2fod -fslgrad bvecs bvals -lmax 8 csd dwi.mif wm.txt wm.mif gm.mif csf.mif'
>>> fod.run()                                 # doctest: +SKIP

Inputs::

        [Mandatory]
        algorithm: ('csd' or 'msmt_csd')
                FOD algorithm
                flag: %s, position: -8
        in_file: (an existing file name)
                input DWI image
                flag: %s, position: -7
        wm_odf: (a file name, nipype default value: wm.mif)
                output WM ODF
                flag: %s, position: -5
        wm_txt: (a file name)
                WM response text file
                flag: %s, position: -6

        [Optional]
        args: (a unicode string)
                Additional parameters to the command
                flag: %s
        bval_scale: ('yes' or 'no')
                specifies whether the b - values should be scaled by the square of
                the corresponding DW gradient norm, as often required for multishell
                or DSI DW acquisition schemes. The default action can also be set in
                the MRtrix config file, under the BValueScaling entry. Valid choices
                are yes / no, true / false, 0 / 1 (default: true).
                flag: -bvalue_scaling %s
        csf_odf: (a file name, nipype default value: csf.mif)
                output CSF ODF
                flag: %s, position: -1
        csf_txt: (a file name)
                CSF response text file
                flag: %s, position: -2
        environ: (a dictionary with keys which are a bytes or None or a value
                 of class 'str' and with values which are a bytes or None or a value
                 of class 'str', nipype default value: {})
                Environment variables
        gm_odf: (a file name, nipype default value: gm.mif)
                output GM ODF
                flag: %s, position: -3
        gm_txt: (a file name)
                GM response text file
                flag: %s, position: -4
        grad_file: (an existing file name)
                dw gradient scheme (MRTrix format
                flag: -grad %s
        grad_fsl: (a tuple of the form: (an existing file name, an existing
                 file name))
                (bvecs, bvals) dw gradient scheme (FSL format
                flag: -fslgrad %s %s
        in_bval: (an existing file name)
                bvals file in FSL format
        in_bvec: (an existing file name)
                bvecs file in FSL format
                flag: -fslgrad %s %s
        in_dirs: (an existing file name)
                specify the directions over which to apply the non-negativity
                constraint (by default, the built-in 300 direction set is used).
                These should be supplied as a text file containing the [ az el ]
                pairs for the directions.
                flag: -directions %s
        mask_file: (an existing file name)
                mask image
                flag: -mask %s
        max_sh: (an integer (int or long), nipype default value: 8)
                maximum harmonic degree of response function
                flag: -lmax %d
        nthreads: (an integer (int or long))
                number of threads. if zero, the number of available cpus will be
                used
                flag: -nthreads %d
        shell: (a list of items which are a float)
                specify one or more dw gradient shells
                flag: -shell %s

Outputs::

        csf_odf: (a file name)
                output CSF ODF
                flag: %s
        gm_odf: (a file name)
                output GM ODF
                flag: %s
        wm_odf: (a file name)
                output WM ODF
                flag: %s

.. _nipype.interfaces.mrtrix3.reconst.FitTensor:


.. index:: FitTensor

FitTensor
---------

`Link to code <http://github.com/nipy/nipype/tree/93c475b/nipype/interfaces/mrtrix3/reconst.py#L53>`__

Wraps command **dwi2tensor**

Convert diffusion-weighted images to tensor images


Example
~~~~~~~

>>> import nipype.interfaces.mrtrix3 as mrt
>>> tsr = mrt.FitTensor()
>>> tsr.inputs.in_file = 'dwi.mif'
>>> tsr.inputs.in_mask = 'mask.nii.gz'
>>> tsr.inputs.grad_fsl = ('bvecs', 'bvals')
>>> tsr.cmdline                               # doctest: +ELLIPSIS
'dwi2tensor -fslgrad bvecs bvals -mask mask.nii.gz dwi.mif dti.mif'
>>> tsr.run()                                 # doctest: +SKIP

Inputs::

        [Mandatory]
        in_file: (an existing file name)
                input diffusion weighted images
                flag: %s, position: -2
        out_file: (a file name, nipype default value: dti.mif)
                the output diffusion tensor image
                flag: %s, position: -1

        [Optional]
        args: (a unicode string)
                Additional parameters to the command
                flag: %s
        bval_scale: ('yes' or 'no')
                specifies whether the b - values should be scaled by the square of
                the corresponding DW gradient norm, as often required for multishell
                or DSI DW acquisition schemes. The default action can also be set in
                the MRtrix config file, under the BValueScaling entry. Valid choices
                are yes / no, true / false, 0 / 1 (default: true).
                flag: -bvalue_scaling %s
        environ: (a dictionary with keys which are a bytes or None or a value
                 of class 'str' and with values which are a bytes or None or a value
                 of class 'str', nipype default value: {})
                Environment variables
        grad_file: (an existing file name)
                dw gradient scheme (MRTrix format
                flag: -grad %s
        grad_fsl: (a tuple of the form: (an existing file name, an existing
                 file name))
                (bvecs, bvals) dw gradient scheme (FSL format
                flag: -fslgrad %s %s
        in_bval: (an existing file name)
                bvals file in FSL format
        in_bvec: (an existing file name)
                bvecs file in FSL format
                flag: -fslgrad %s %s
        in_mask: (an existing file name)
                only perform computation within the specified binary brain mask
                image
                flag: -mask %s
        method: ('nonlinear' or 'loglinear' or 'sech' or 'rician')
                select method used to perform the fitting
                flag: -method %s
        nthreads: (an integer (int or long))
                number of threads. if zero, the number of available cpus will be
                used
                flag: -nthreads %d
        reg_term: (a float)
                specify the strength of the regularisation term on the magnitude of
                the tensor elements (default = 5000). This only applies to the non-
                linear methods
                flag: -regularisation %f

Outputs::

        out_file: (an existing file name)
                the output DTI file
